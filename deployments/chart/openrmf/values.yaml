# Default values for mux-aew.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.

# main DNS name used to access the deployed app in k8s via DNS through an NGINX ingress controller
# if running locally, you may need to edit your "hosts" file under /etc/hosts or the 
# /windows/system32/drivers/etc/hosts file in Windows
# Examples: openrmf.local, demo.openrmf.io, openrmf.mycompany.com
dnsName: openrmf.local

# The Identity Provider URL and Realm, i.e. using Keycloak for AuthN and AuthZ
# Examples: https://keycloak.openrmf.io/auth, http://192.168.11.29:9001/auth
identityProviderURL: http://192.168.11.29:9001/auth
# The Realm to use from the ID provider
identityProviderRealm: openrmf
# The Identity Provider Client Id to use
identityProviderClientId: openrmf

# the namespace to put all of this in
namespace: openrmfdev

# Installation type
# Examples: awseks, minikube
installType: minikube

# versions of container to adjust
# examples: 0.8, 0.8.1, latest
auditImage: 0.13.02
auditmsgImage: 0.13.01
checklistmsgImage: 0.13.01
complianceImage: 0.13.01
compliancemsgImage: 0.13.01
controlImage: 0.13.01
controlmsgImage: 0.13.01
readImage: 0.13.02
saveImage: 0.13.02
scoremsgImage: 0.13.01
scoringImage: 0.13.02
templateImage: 0.13.02
templatemsgImage: 0.13.01
uploadImage: 0.13.02
systemmsgImage: 0.13.01
webuiImage: 0.13.02
mongoImage: 4.0.5
natsImage: 2.1.2-linux

# storage class name for PVC
# examples: standard, gp2, ebs-sc, efs-sc
storageClass: standard

# API URLs for the web client side calls, used in the web.yaml deployment for the UI
# These are rewritted to the web pods in a ConfigMap for inclusion of client-side API calls
# Examples: 'http://openrmf.local/read', https://read.openrmf.io
readAPI:       http://openrmf.local/read
scoreAPI:      http://openrmf.local/scoring
saveAPI:       http://openrmf.local/save
uploadAPI:     http://openrmf.local/upload
templateAPI:   http://openrmf.local/template
complianceAPI: http://openrmf.local/compliance
controlAPI:    http://openrmf.local/controls
auditAPI:      http://openrmf.local/audit

# Service Types for Minikube and AWS separately
# Examples: NodePort, LoadBalancer, etc.
serviceTypeMinikube: NodePort
serviceTypeAWS: LoadBalancer

# AWS ACM Certificate ARN if used
awsACM: arn:aws:acm:us-east-1:xxxxxxxxxxxxxx:certificate/xxxxxxxxxxxxxxxx

# Database initialization Scripts
checklistAppUser: openrmf
checklistAppPassword: openrmf1234!
templateAppUser: openrmftemplate
templateAppPassword: openrmf4321!
scoreAppUser: openrmfscore
scoreAppPassword: openrmf9876!
auditAppUser: openrmfaudit
auditAppPassword: openrmf4321!

# SECRET VALUES ARE TO BE IN base64
# Example: echo -n 'openrmf' | base64 
# Above gives you a base64 encoded value to use here
# More information can be found at https://kubernetes.io/docs/concepts/configuration/secret/

# Checklist Database Secret Values
checklistInitDBUser: cm9vdA==
checklistInitDBPassword: bVlwMnNzdzByZA==
checklistInitDBName: b3BlbnJtZg==
# app connection must be in the form below with valid user, password, and database names
# the user, password, and database name must match the initialization scripts above -- secrets however are base64 encoded
# mongodb://{{.Values.scoreAppUser}}:{{.Values.scoreAppPassword}}@openrmf-scoredb/{{.Values.scoreInitDBName}}?authSource={{.Values.scoreInitDBName}}
checklistAppConnection: bW9uZ29kYjovL29wZW5ybWY6b3BlbnJtZjEyMzQhQG9wZW5ybWYtY2hlY2tsaXN0ZGIvb3BlbnJtZj9hdXRoU291cmNlPW9wZW5ybWY=

# Score Database Secret Values
scoreInitDBUser: cm9vdA==
scoreInitDBPassword: bVlwMnNzdzByZA==
scoreInitDBName: b3BlbnJtZnNjb3Jl
# app connection must be in the form below with valid user, password, and database names
# the user, password, and database name must match the initialization scripts above -- secrets however are base64 encoded
# mongodb://{{.Values.scoreAppUser}}:{{.Values.scoreAppPassword}}@openrmf-scoredb/{{.Values.scoreInitDBName}}?authSource={{.Values.scoreInitDBName}}
scoreAppConnection: bW9uZ29kYjovL29wZW5ybWZzY29yZTpvcGVucm1mOTg3NiFAb3BlbnJtZi1zY29yZWRiL29wZW5ybWZzY29yZT9hdXRoU291cmNlPW9wZW5ybWZzY29yZQ==

# Template Database Secret Values
templateInitDBUser: cm9vdA==
templateInitDBPassword: bVlwMnNzdzByZA==
templateInitDBName: b3BlbnJtZnRlbXBsYXRl
# app connection must be in the form below with valid user, password, and database names
# the user, password, and database name must match the initialization scripts above -- secrets however are base64 encoded
# mongodb://{{.Values.scoreAppUser}}:{{.Values.scoreAppPassword}}@openrmf-scoredb/{{.Values.scoreInitDBName}}?authSource={{.Values.scoreInitDBName}}
templateAppConnection: bW9uZ29kYjovL29wZW5ybWZ0ZW1wbGF0ZTpvcGVucm1mNDMyMSFAb3BlbnJtZi10ZW1wbGF0ZWRiL29wZW5ybWZ0ZW1wbGF0ZT9hdXRoU291cmNlPW9wZW5ybWZ0ZW1wbGF0ZQ==

# Template Database Secret Values
auditInitDBUser: cm9vdA==
auditInitDBPassword: bVlwMnNzdzByZA==
auditInitDBName: b3BlbnJtZmF1ZGl0
# app connection must be in the form below with valid user, password, and database names
# the user, password, and database name must match the initialization scripts above -- secrets however are base64 encoded
# mongodb://{{.Values.scoreAppUser}}:{{.Values.scoreAppPassword}}@openrmf-scoredb/{{.Values.scoreInitDBName}}?authSource={{.Values.scoreInitDBName}}
auditAppConnection: bW9uZ29kYjovL29wZW5ybWZhdWRpdDpvcGVucm1mNDMyMSFAb3BlbnJtZi1hdWRpdGRiL29wZW5ybWZhdWRpdD9hdXRoU291cmNlPW9wZW5ybWZhdWRpdA==

# Jaeger Tracing Server setup from https://www.jaegertracing.io/docs/latest/sampling/
jaegerSamplerType: probabilistic
jaegerSamplerParam: 0.1 # percentage to trace


#########
# Prometheus Operator Setup https://github.com/helm/charts/tree/master/stable/prometheus-operator and 
# https://github.com/coreos/prometheus-operator
# To use these you must have the prometheus operator installed from the links above
#########

# do you use this operator
useprometheusoperator: true

# The label name and value in name: value setup to match what the Prometheus Operator is using
# for it to know to pick up and use the ServiceMonitor setup
# To find this, run 'kubectl get prometheus -o yaml --all-namespaces' and run through the YAML
# Look for something like this that will show how it matches labels, and use that label setup
#     serviceMonitorSelector:
#       matchLabels:
#         release: prometheus-operator-1586292731

servicemonitormatchlabelname: release
servicemonitormatchlabelvalue: prometheus-operator-1586292731